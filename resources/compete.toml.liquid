# Path to the test file (Liquid template)
#
# Variables:
#
# - `manifest_dir`: Package directory
# - `contest`:      Contest ID (e.g. "abc100")
# - `bin_name`:     Name of a `bin` target (e.g. "abc100-a")
# - `bin_alias`:    "Alias" for a `bin` target defined in `pacakge.metadata.cargo-compete` (e.g. "a")
# - `problem`:      Alias for `bin_alias` (deprecated)
#
# Additional filters:
#
# - `kebabcase`: Convert to kebab case (by using the `heck` crate)
test-suite = {% raw %}"{{ manifest_dir }}/testcases/{{ bin_alias }}.yml"{% endraw %}

# Open files with the command (`jq` command that outputs `string[] | string[][]`)
#
# VSCode:
#open = '[["code", "-a", .manifest_dir], ["code"] + (.paths | map([.src, .test_suite]) | flatten)]'
# Emacs:
#open = '["emacsclient", "-n"] + (.paths | map([.src, .test_suite]) | flatten)'

[template]
src = '''
fn main() {
    todo!();
}
'''

[template.new]
# `edition` for `Cargo.toml`.
edition = "{{ template_new_edition }}"
# `profile` for `Cargo.toml`.
#
# By setting this, you can run tests with `opt-level=3` while enabling `debug-assertions` and `overflow-checks`.
#profile = '''
#[dev]
#opt-level = 3
#'''
dependencies = '''
{% if template_new_dependencies_content -%}
{{ template_new_dependencies_content | rstrip }}
{%- else -%}
#proconio = { version = "=0.3.6", features = ["derive"] }
{%- endif %}
'''
dev-dependencies = '''
#atcoder-202004-lock = { git = "https://github.com/qryxip/atcoder-202004-lock" }
'''

[template.new.copy-files]
{% if template_new_lockfile -%}
"{{ template_new_lockfile }}" = "Cargo.lock"
{% endif %}
[new]
kind = "cargo-compete"
# Platform
#
# - atcoder
# - codeforces
# - yukicoder
platform = "{{ new_platform }}"
# Path (Liquid template)
#
# Variables:
#
# - `contest`:      Contest ID. **May be nil**
# - `package_name`: Package name
{% if new_platform == "yukicoder" -%}
path = {% raw %}"./{{ contest | default: 'problems' }}"{% endraw %}
{%- else -%}
path = {% raw %}"./{{ contest }}"{% endraw %}
{%- endif %}

#[new]
#kind = "oj-api"
#url = {% raw %}"https://atcoder.jp/contests/{{ id }}"{% endraw %}
#path = {% raw %}"./{{ contest }}"{% endraw %}

{% raw -%}
# for Library-Checker
#[add]
#url = "https://judge.yosupo.jp/problem/{{ args[0] }}"
##is-contest = ["false"] # optional
##target-kind = "bin" # ["bin", "example"]. default to "bin"
#bin-name = '{{ args[0] }}'
##bin-alias = '{{ args[0] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional

# for yukicoder
#[add]
#url = '{% case args[0] %}{% when "contest" %}https://yukicoder.me/contests/{{ args[1] }}{% when "problem" %}https://yukicoder.me/problems/no/{{ args[1] }}{% endcase %}'
#is-contest = ["bash", "-c", '[[ $(cut -d / -f 4) == "contests" ]]'] # optional
##target-kind = "bin" # ["bin", "example"]. default to "bin"
#bin-name = '{% assign segments = url | split: "/" %}{{ segments[5] }}'
##bin-alias = '{% assign segments = url | split: "/" %}{{ segments[5] }}' # optional
##bin-src-path = './src/bin/{{ bin_alias }}.rs' # optional
{%- endraw %}

[test]
# Toolchain for the test. (optional)
toolchain = "{{ test_toolchain }}"
# Profile for `cargo build`. ("dev" | "release")
#
# Defaults to `"dev"`.
#profile = "dev"

{% if submit_via_binary == true -%}
[submit]
kind = "command"
args = ["cargo", "executable-payload", "--bin", {% raw %}"{{ bin_name }}"{% endraw %}]
language_id = "{{ rust_language_id }}"
{%- else -%}
[submit]
kind = "file"
path = "{% raw %}{{ src_path }}{% endraw %}"
language_id = "{{ rust_language_id }}"
#[submit]
#kind = "command"
#{% raw %}args = ["cargo", "equip", "--exclude-atcoder-crates", "--resolve-cfgs", "--remove", "docs", "--minify", "libs", "--rustfmt", "--check", "--bin", "{{ bin_name }}"]{% endraw %}
#language_id = "{{ rust_language_id }}"
{%- endif -%}
